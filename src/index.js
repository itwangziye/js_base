//变量：变量是存储信息的容器，可以存储任何类型的数据。
// 变量声明：如：var a;、var fn=function(){};
// 函数声明：如：function foo(){};
// 函数形参：函数的形参存在于函数作用域中；
// 语言自定义构建：所有的作用域都会自动生成this、arguments两个默认变量


// 1.变量声明
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    // a=2
    // var a;
    // console.log(a)
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    // console.log(a)
    // var a = 2 ;
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


// 2.函数声明
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    // foo();
    // function foo(){
    //     console.log(a);
    //     var a =2;
    // }
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    // foo();
    // var foo = function bar(){
    //     console.log(a);
    //     var a =2;
    // }
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 3.函数声明和变量声明的优先性
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
    // foo();
    // var foo;
    // function foo(){
    //     console.log(1)
    // }
    // foo = function(){
    //     console.log(2)
    // }
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// var a=1;
// function foo(){
//   a=10;
//   return;
//   function a(){ }
// }
// foo();
// console.log(a);
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 4.let,const的声明
// var命令和function命令。ES6 除了添加let和const命令，import命令和class命令。所以，ES6 一共有 6 种声明变量的方法
//块级作用域： ES6允许块级作用域的任意嵌套。外层作用域无法读取内层作用域的变量。
// 类似于 if、switch 条件选择或者 for、while 这样的循环体即是所谓的块级作用域；可以看做{}就是一个块级作用域；

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// var callbacks = [];
// for (var i = 0; i <= 2; i++) {
//     callbacks[i] = function () {
//             return i * 2;
//         };
// }

// console.log(callbacks[0]());
// console.log(callbacks[1]()); 
// console.log(callbacks[2]()); 
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// var callbacks = [];
// for (var i = 0; i <= 2; i++) {
//     (function (i) {
//         callbacks[i] = function () {
//               console.log(i * 2) 
//         };
//     })(i);
// }
// callbacks[0]() === 0;
// callbacks[1]() === 2;
// callbacks[2]() === 4;

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// let callbacks = []
// for (let i = 0; i <= 2; i++) {
//     callbacks[i] = function () {
//         console.log(i * 2) 
//     }
// }
// callbacks[0]() 
// callbacks[1]() 
// callbacks[2]() 

//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 5.let提升
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// var 的情况
// console.log(foo); // 输出undefined
// var foo = 2;

// // let 的情况
// console.log(bar); // 报错ReferenceError
// let bar = 2;
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

// 6.暂时性死区
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
// var foo = 123;

// if (true) {
//   foo = 'abc'; // ReferenceError
//   let foo;
// }
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<






